#include<iostream>
#include <queue>

using namespace std;
typedef struct BiNode{
    BiNode *lchild;
    BiNode *rchild;
    char data;
}BiNode,*BiTree;

void CreatTree(BiTree &T)
{
    char c;
    cin>>c;
    if (c=='*'){
        T = NULL;
    } else{
        T = new BiNode ;
        T->data = c;
        CreatTree(T->lchild);
        CreatTree(T->rchild);
    }
}

void InorderTraverse(BiTree &T)
{
    int number,flag = 1;
    cin>>number;
    if (number == 1){
        cout<<1;
        return;
    }
    int num[10]={0},i = 1;
    queue<BiTree> q;
    if (T){
        q.push(T);
        num[i] = 1;               //第一层入队,第一层有一个节点
    }
    while (!q.empty()){
        T = q.front();
        q.pop();                    //出队
        num[i]-=1;                //上一层层的节点-1
        if (T->lchild){             //有左孩子 当前层孩子+1
            num[i+1]++;
            q.push(T->lchild);      //入队
        }
        if (T->rchild){             //有右孩子 当前层孩子+1
            num[i+1]++;
            q.push(T->rchild);
        }
        if (num[i] == 0){         //判断当前层是否完毕
            if (num[i+1] == number){  //如果完毕 则判断其节点是否等于number
                cout<<i+1;
                flag = 0;
                break;
            }
            else{                   //如果完毕 但不等于number 则遍历下一层
                i++;
            }                       //如果当前层没有遍历完,则继续
        }
    }
    if (flag == 1){
        cout<<0;
    }
}

int main()
{
    BiTree T;
    CreatTree(T);

    InorderTraverse(T);
}
